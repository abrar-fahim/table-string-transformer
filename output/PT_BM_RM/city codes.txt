---------------
Results for city codes
Coverage in golden matched rows: 0/199 = 0.00%
Best pattern Coverage  in golden matched rows: 0.00%
Coverage: NA
Best pattern Coverage: 0.00%
Total Patterns: 0, input rows: 0
Average Input length (Num chars): 0, Average output length (Num chars): 0
Max Tokens: 3
Total Run time: 9.894371032714844e-05, Generalization time:9.5367431640625e-07
Total number of placeholder combinations (After removing duplicates): 0
Total number of all generated patterns: 0
Number of duplicate patterns removed: 0
Total number of generated patterns to try: 0
Effective Generalizations: 0

Number of all generated placeholder comb.: 0
Number of all remaining placeholder comb.: 0
Number of all removed placeholder comb.: 0
Number of init remaining placeholder comb.: 0
Number of splitted remaining placeholder comb.: 0
Number of removed init placeholder comb.: 0
Number of removed splitted placeholder comb.: 0

placeholder generation time: 2.002716064453125e-05
extract patterns time: 1.5974044799804688e-05
duplicate patterns remove time: 4.38690185546875e-05
patterns applying time: 1.5974044799804688e-05
get covering set time: 3.0994415283203125e-06

Number of all patterns that applied on all rows (#pattern * #rows) (complexity): 0
Number of successful patterns: 0
Number of failed patterns: 0
Number of failed patterns filtered by cache (cache hit): 0
N-gram Row Matching: P:0.0,R:0.0,F:0.0
Params: {'max_tokens': 3, 'max_blocks': 3, 'generalize': False, 'sample_size': None, 'token_splitters': [' '], 'remove_duplicate_patterns': True, 'switch_literals_placeholders': True, 'only_first_match': False, 'units_to_extract': [<class 'Transformation.Blocks.LiteralPatternBlock.LiteralPatternBlock'>, <class 'Transformation.Blocks.PositionPatternBlock.PositionPatternBlock'>, <class 'Transformation.Blocks.TokenPatternBlock.TokenPatternBlock'>, <class 'Transformation.Blocks.SplitSubstrPatternBlock.SplitSubstrPatternBlock'>]}
pattern list: {

****Golden rows apply patterns******
golden pattern list: {

--- Not covered inputs:
   ('eap', 'eap')
   ('lyg', 'lyg')
   ('aci', 'aci')
   ('ant', 'ant')
   ('apw', 'apw')
   ('lyi', 'lyi')
   ('mde', 'mde')
   ('mdh', 'mdh')
   ('jtn', 'jtn')
   ('mdk', 'mdk')
   ('lmv', 'lmv')
   ('lzc', 'lzc')
   ('aqp', 'aqp')
   ('ast', 'ast')
   ('tyc', 'tyc')
   ('lzh', 'lzh')
   ('mec', 'mec')
   ('dzh', 'dzh')
   ('ees', 'ees')
   ('kfz', 'kfz')
   ('jta', 'jta')
   ('kjb', 'kjb')
   ('ehu', 'ehu')
   ('fzl', 'fzl')
   ('kxb', 'kxb')
   ('gdr', 'gdr')
   ('hlj', 'hlj')
   ('hzu', 'hzu')
   ('mxq', 'mxq')
   ('afk', 'afk')
   ('jhf', 'jhf')
   ('bll', 'bll')
   ('jsb', 'jsb')
   ('ath', 'ath')
   ('txc', 'txc')
   ('uhs', 'uhs')
   ('meh', 'meh')
   ('mei', 'mei')
   ('mel', 'mel')
   ('mem', 'mem')
   ('men', 'men')
   ('mbs', 'mbs')
   ('mbw', 'mbw')
   ('mby', 'mby')
   ('avp', 'avp')
   ('dia', 'dia')
   ('gnj', 'gnj')
   ('gyo', 'gyo')
   ('meo', 'meo')
   ('hsf', 'hsf')
   ('mey', 'mey')
   ('rdl', 'rdl')
   ('vcc', 'vcc')
   ('mkz', 'mkz')
   ('mlc', 'mlc')
   ('gdb', 'gdb')
   ('aei', 'aei')
   ('mle', 'mle')
   ('aqg', 'aqg')
   ('jcs', 'jcs')
   ('aqi', 'aqi')
   ('aqj', 'aqj')
   ('mlg', 'mlg')
   ('lvi', 'lvi')
   ('axo', 'axo')
   ('mdn', 'mdn')
   ('cny', 'cny')
   ('ctv', 'ctv')
   ('cwp', 'cwp')
   ('mdg', 'mdg')
   ('mek', 'mek')
   ('jpo', 'jpo')
   ('jpe', 'jpe')
   ('jpy', 'jpy')
   ('ycm', 'ycm')
   ('mea', 'mea')
   ('mef', 'mef')
   ('ood', 'ood')
   ('vsk', 'vsk')
   ('cod', 'cod')
   ('meg', 'meg')
   ('mep', 'mep')
   ('bdo', 'bdo')
   ('dsy', 'dsy')
   ('bdq', 'bdq')
   ('mej', 'mej')
   ('ewr', 'ewr')
   ('meq', 'meq')
   ('iup', 'iup')
   ('meu', 'meu')
   ('rld', 'rld')
   ('mer', 'mer')
   ('mes', 'mes')
   ('mfg', 'mfg')
   ('mfi', 'mfi')
   ('coh', 'coh')
   ('ddd', 'ddd')
   ('cok', 'cok')
   ('dwf', 'dwf')
   ('jde', 'jde')
   ('cya', 'cya')
   ('mfk', 'mfk')
   ('mew', 'mew')
   ('mff', 'mff')
   ('spk', 'spk')
   ('mfs', 'mfs')
   ('mft', 'mft')
   ('mfq', 'mfq')
   ('agz', 'agz')
   ('dbr', 'dbr')
   ('ddc', 'ddc')
   ('mfr', 'mfr')
   ('lpb', 'lpb')
   ('eea', 'eea')
   ('erh', 'erh')
   ('eri', 'eri')
   ('erl', 'erl')
   ('ext', 'ext')
   ('ffa', 'ffa')
   ('nei', 'nei')
   ('lpf', 'lpf')
   ('whb', 'whb')
   ('lpt', 'lpt')
   ('ltk', 'ltk')
   ('maw', 'maw')
   ('max', 'max')
   ('mba', 'mba')
   ('mgz', 'mgz')
   ('mhd', 'mhd')
   ('lbg', 'lbg')
   ('lbq', 'lbq')
   ('eyp', 'eyp')
   ('eyw', 'eyw')
   ('eze', 'eze')
   ('hcz', 'hcz')
   ('mlh', 'mlh')
   ('dge', 'dge')
   ('dgt', 'dgt')
   ('fna', 'fna')
   ('mnm', 'mnm')
   ('mno', 'mno')
   ('mqt', 'mqt')
   ('mhg', 'mhg')
   ('mhh', 'mhh')
   ('mhk', 'mhk')
   ('mhq', 'mhq')
   ('ldh', 'ldh')
   ('mqq', 'mqq')
   ('mqs', 'mqs')
   ('loz', 'loz')
   ('lpa', 'lpa')
   ('loq', 'loq')
   ('lpe', 'lpe')
   ('lpi', 'lpi')
   ('ahi', 'ahi')
   ('fnb', 'fnb')
   ('fnc', 'fnc')
   ('fnd', 'fnd')
   ('hlt', 'hlt')
   ('mqu', 'mqu')
   ('add', 'add')
   ('mrb', 'mrb')
   ('mro', 'mro')
   ('mrq', 'mrq')
   ('mto', 'mto')
   ('mso', 'mso')
   ('msp', 'msp')
   ('msq', 'msq')
   ('lpg', 'lpg')
   ('lpj', 'lpj')
   ('lpk', 'lpk')
   ('lpo', 'lpo')
   ('lpx', 'lpx')
   ('lpy', 'lpy')
   ('occ', 'occ')
   ('och', 'och')
   ('dju', 'dju')
   ('dka', 'dka')
   ('ily', 'ily')
   ('imk', 'imk')
   ('imq', 'imq')
   ('abj', 'abj')
   ('ixi', 'ixi')
   ('lqk', 'lqk')
   ('lqm', 'lqm')
   ('lrb', 'lrb')
   ('lrt', 'lrt')
   ('lru', 'lru')
   ('ixj', 'ixj')
   ('lrv', 'lrv')
   ('lsb', 'lsb')
   ('lsd', 'lsd')
   ('lsk', 'lsk')
   ('lsm', 'lsm')
   ('lsn', 'lsn')
   ('lso', 'lso')
   ('lsq', 'lsq')
   ('lsv', 'lsv')
   ('dmm', 'dmm')
****************

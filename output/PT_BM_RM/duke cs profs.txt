---------------
Results for duke cs profs
Coverage in golden matched rows: 44/44 = 100.00%
Best pattern Coverage  in golden matched rows: 61.36%
Coverage: 63/63 = 100.00%
Best pattern Coverage: 31.75%
Total Patterns: 34, input rows: 63
Average Input length (Num chars): 14.714285714285714, Average output length (Num chars): 14.73015873015873
Max Tokens: 3
Total Run time: 3.497622013092041, Generalization time:9.5367431640625e-07
Total number of placeholder combinations (After removing duplicates): 720
Total number of all generated patterns: 81253
Number of duplicate patterns removed: 41508
Total number of generated patterns to try: 39745
Effective Generalizations: 0

Number of all generated placeholder comb.: 1176
Number of all remaining placeholder comb.: 1064
Number of all removed placeholder comb.: 112
Number of init remaining placeholder comb.: 616
Number of splitted remaining placeholder comb.: 448
Number of removed init placeholder comb.: 0
Number of removed splitted placeholder comb.: 112

placeholder generation time: 0.30307984352111816
extract patterns time: 0.25887322425842285
duplicate patterns remove time: 0.15572381019592285
patterns applying time: 2.6492440700531006
get covering set time: 0.13070106506347656

Number of all patterns that applied on all rows (#pattern * #rows) (complexity): 2503935
Number of successful patterns: 42008
Number of failed patterns: 2461927
Number of failed patterns filtered by cache (cache hit): 2295617
N-gram Row Matching: P:0.5238095238095238,R:0.75,F:0.6168224299065421
Params: {'max_tokens': 3, 'max_blocks': 3, 'generalize': False, 'sample_size': None, 'token_splitters': [' '], 'remove_duplicate_patterns': True, 'switch_literals_placeholders': True, 'only_first_match': False, 'units_to_extract': [<class 'Transformation.Blocks.LiteralPatternBlock.LiteralPatternBlock'>, <class 'Transformation.Blocks.PositionPatternBlock.PositionPatternBlock'>, <class 'Transformation.Blocks.TokenPatternBlock.TokenPatternBlock'>, <class 'Transformation.Blocks.SplitSubstrPatternBlock.SplitSubstrPatternBlock'>]}
pattern list: {
                 {[Split: ' ', 1 ], [LIT:' '], [Split: ' ', 0 ], } -> 20/63
                     |->('munagala kamesh', 'kamesh munagala')
                     |->('cox landon', 'landon cox')
                     |->('chakrabarty krishnendu', 'krishnendu chakrabarty')
                     |->('maggs bruce', 'bruce maggs')
                     |->('calderbank robert', 'robert calderbank')
                     |->('astrachan owen', 'owen astrachan')
                     |->('maggioni mauro', 'mauro maggioni')
                     |->('mukherjee sayan', 'sayan mukherjee')
                     |->('gordan raluca-mihaela', 'raluca-mihaela gordan')
                     |->('farsiu sina', 'sina farsiu')
                     |->('conitzer vincent', 'vincent conitzer')
                     |->('sapiro guillermo', 'guillermo sapiro')
                     |->('yang xiaowei', 'xiaowei yang')
                     |->('panigrahi debmalya', 'debmalya panigrahi')
                     |->('dwyer chris', 'chris dwyer')
                     |->('kim jungsang', 'jungsang kim')
                     |->('tomasi carlo', 'carlo tomasi')
                     |->('babu shivnath', 'shivnath babu')
                     |->('machanavajjhala ashwin', 'ashwin machanavajjhala')
                     |->('hilton andrew', 'andrew hilton')
                 {[Split: ' ', [1, 2] ], [LIT:' '], [Split: ' ', 0 ], } -> 11/63
                     |->('rodger susan h.', 'susan h. rodger')
                     |->('reif john h.', 'john h. reif')
                     |->('sorin daniel j.', 'daniel j. sorin')
                     |->('chase jeffrey s.', 'jeffrey s. chase')
                     |->('trivedi kishor s.', 'kishor s. trivedi')
                     |->('agarwal pankaj k.', 'pankaj k. agarwal')
                     |->('lucic richard a.', 'richard a. lucic')
                     |->('parr ronald e.', 'ronald e. parr')
                     |->('schmidler scott c.', 'scott c. schmidler')
                     |->('hartemink alexander j.', 'alexander j. hartemink')
                     |->('ellis carla schlatter', 'carla schlatter ellis')
                 {[LIT:'steve tanimoto'], } -> 1/63  -- Original Trans.: {[SplitSubstr: 't', 1, (4-5) ], [SplitSubstr: 'l', 1, (5-6) ], [LIT:'eve tanimoto'], }
                     |->('mÃ¸lhave thomas', 'steve tanimoto')
                 {[LIT:'m. frans kaashoek'], } -> 1/63  -- Original Trans.: {[SplitSubstr: 'e', 0, (4-5) ], [LIT:'. frans kaashoek'], [Split: 'k', 1 ], }
                     |->('starmer c. frank', 'm. frans kaashoek')
                 {[LIT:'peter kazanzides'], } -> 1/63  -- Original Trans.: {[LIT:'peter kazanzides'], }
                     |->('heller katherine', 'peter kazanzides')
                 {[LIT:'john a. board'], } -> 1/63  -- Original Trans.: {[Substr:(10-17)], [SplitSubstr: 'h', 0, (5-6) ], [SplitSubstr: 'j', 0, (0-5) ], }
                     |->('board jr. john a.', 'john a. board')
                 {[LIT:'barbara liskov'], } -> 1/63  -- Original Trans.: {[LIT:'ba'], [SplitSubstr: 'l', 1, (4-5) ], [LIT:'bara liskov'], }
                     |->('hsu lisa r.', 'barbara liskov')
                 {[LIT:'adam wierman'], } -> 1/63  -- Original Trans.: {[SplitSubstr: 'i', 1, (7-8) ], [LIT:'dam w'], [SplitSubstr: 'w', 0, (1-7) ], }
                     |->('biermann alan w.', 'adam wierman')
                 {[LIT:'boon thau loo'], } -> 1/63  -- Original Trans.: {[SplitSubstr: 'o', 0, (0-1) ], [SplitSubstr: ' ', 0, (4-5) ], [LIT:'on thau loo'], }
                     |->('benson theo', 'boon thau loo')
                 {[LIT:'jeffrey r. n. forbes'], } -> 1/63  -- Original Trans.: {[LIT:'jeffrey r. n.'], [SplitSubstr: 'j', 1, (6-7) ], [SplitSubstr: 'j', 0, (0-6) ], }
                     |->('forbes jeffrey r. n.', 'jeffrey r. n. forbes')
                 {[LIT:'salvatore j. stolfo'], } -> 1/63  -- Original Trans.: {[LIT:'salvatore j. s'], [SplitSubstr: 'r', 1, (7-11) ], [SplitSubstr: 'i', 1, (2-3) ], }
                     |->('ramm dietolf', 'salvatore j. stolfo')
                 {[LIT:'mathieu desbrun'], } -> 1/63  -- Original Trans.: {[LIT:'mathi'], [SplitSubstr: 'n', 0, (0-1) ], [LIT:'u desbrun'], }
                     |->('edelsbrunner herbert', 'mathieu desbrun')
                 {[LIT:'heng ji'], } -> 1/63  -- Original Trans.: {[LIT:'he'], [Substr:(2-6)], [LIT:'i'], }
                     |->('yang jun', 'heng ji')
                 {[LIT:'salman avestimehr'], } -> 1/63  -- Original Trans.: {[LIT:'salman avestime'], [SplitSubstr: 'm', 0, (2-3) ], [SplitSubstr: 'z', 1, (2-3) ], }
                     |->('azhar salman', 'salman avestimehr')
                 {[LIT:'thomas funkhouser'], } -> 1/63  -- Original Trans.: {[LIT:'thomas funk'], [SplitSubstr: 'i', 0, (0-1) ], [LIT:'ouser'], }
                     |->('hauser kris', 'thomas funkhouser')
                 {[LIT:'donald bitzer'], } -> 1/63  -- Original Trans.: {[LIT:'donald bitze'], [SplitSubstr: ' ', 1, (1-2) ], }
                     |->('donald bruce r.', 'donald bitzer')
                 {[LIT:'robert a. van de geijn'], } -> 1/63  -- Original Trans.: {[LIT:'robert a. van de g'], [SplitSubstr: ' ', 0, (4-5) ], [LIT:'ijn'], }
                     |->('wagner robert a.', 'robert a. van de geijn')
                 {[LIT:'sebastian thrun'], } -> 1/63  -- Original Trans.: {[SplitSubstr: 't', 1, (4-5) ], [LIT:'ebastian thru'], [SplitSubstr: 'h', 0, (5-6) ], }
                     |->('labean thomas h.', 'sebastian thrun')
                 {[LIT:'romit roy choudhury'], } -> 1/63  -- Original Trans.: {[LIT:'romi'], [SplitSubstr: 'y', 1, (2-6) ], [LIT:'y choudhury'], }
                     |->('bryant robert l.', 'romit roy choudhury')
                 {[LIT:'jun xu'], } -> 1/63  -- Original Trans.: {[LIT:'j'], [SplitSubstr: 'b', 0, (1-5) ], [Substr:(1-2)], }
                     |->('sun xiaobai', 'jun xu')
                 {[LIT:'lorenzo alvisi'], } -> 1/63  -- Original Trans.: {[SplitSubstr: 'a', 0, (0-1) ], [LIT:'orenzo alvis'], [SplitSubstr: '.', 0, (10-11) ], }
                     |->('lebeck alvin r.', 'lorenzo alvisi')
                 {[LIT:'lee hollaar'], } -> 1/63  -- Original Trans.: {[LIT:'lee hol'], [SplitSubstr: ' ', 0, (0-1) ], [LIT:'aar'], }
                     |->('lee benjamin c.', 'lee hollaar')
                 {[LIT:'leonidas guibas'], } -> 1/63  -- Original Trans.: {[LIT:'leonidas gu'], [SplitSubstr: 'k', 1, (2-3) ], [LIT:'bas'], }
                     |->('konidaris george', 'leonidas guibas')
                 {[LIT:'yuval tamir'], } -> 1/63  -- Original Trans.: {[LIT:'yuval '], [Substr:(12-13)], [LIT:'amir'], }
                     |->('duvall robert c.', 'yuval tamir')
                 {[LIT:'chris north'], } -> 1/63  -- Original Trans.: {[LIT:'chris north'], }
                     |->('pitsianis nikos', 'chris north')
                 {[LIT:'shaddin dughmi'], } -> 1/63  -- Original Trans.: {[LIT:'sha'], [SplitSubstr: 'l', 1, (0-1) ], [LIT:'din dughmi'], }
                     |->('baldin ilya', 'shaddin dughmi')
                 {[LIT:'xianghong jasmine zhou'], } -> 1/63  -- Original Trans.: {[LIT:'xianghong jasmi'], [Substr:(2-3)], [LIT:'e zhou'], }
                     |->('yang jun', 'xianghong jasmine zhou')
                 {[LIT:'tamer kahveci'], } -> 1/63  -- Original Trans.: {[SplitSubstr: ' ', 1, (2-3) ], [LIT:'amer kahvec'], [SplitSubstr: 'r', 2, (0-1) ], }
                     |->('heller katherine', 'tamer kahveci')
                 {[LIT:'deepak ganesan'], } -> 1/63  -- Original Trans.: {[LIT:'deepak gane'], [SplitSubstr: 'o', 1, (2-3) ], [LIT:'an'], }
                     |->('roy sudeepa', 'deepak ganesan')
                 {[LIT:'stefanie tellex'], } -> 1/63  -- Original Trans.: {[SplitSubstr: 'm', 1, (1-2) ], [SplitSubstr: 'e', 1, (1-2) ], [LIT:'efanie tellex'], }
                     |->('gallie thomas', 'stefanie tellex')
                 {[LIT:'nick mckeown'], } -> 1/63  -- Original Trans.: {[LIT:'nick m'], [SplitSubstr: 'r', 1, (1-3) ], [LIT:'eown'], }
                     |->('patrick merrell', 'nick mckeown')
                 {[LIT:'lee coraor'], } -> 1/63  -- Original Trans.: {[LIT:'lee '], [SplitSubstr: 'n', 2, (1-2) ], [LIT:'oraor'], }
                     |->('lee benjamin c.', 'lee coraor')
                 {[LIT:'lirong xia'], } -> 1/63  -- Original Trans.: {[LIT:'lirong'], [SplitSubstr: 'r', 0, (2-3) ], [LIT:'xia'], }
                     |->('ge rong', 'lirong xia')
                 {[LIT:'anind dey'], } -> 1/63  -- Original Trans.: {[LIT:'ani'], [SplitSubstr: 'e', 1, (2-6) ], [LIT:'ey'], }
                     |->('loveland donald w.', 'anind dey')

****Golden rows apply patterns******
golden pattern list: {
                 {[Split: ' ', 1 ], [LIT:' '], [Split: ' ', 0 ], } -> 27/44
                     |->('astrachan owen', 'owen astrachan')
                     |->('babu shivnath', 'shivnath babu')
                     |->('benson theo', 'theo benson')
                     |->('calderbank robert', 'robert calderbank')
                     |->('chakrabarty krishnendu', 'krishnendu chakrabarty')
                     |->('conitzer vincent', 'vincent conitzer')
                     |->('cox landon', 'landon cox')
                     |->('dwyer chris', 'chris dwyer')
                     |->('farsiu sina', 'sina farsiu')
                     |->('gordan raluca-mihaela', 'raluca-mihaela gordan')
                     |->('heller katherine', 'katherine heller')
                     |->('hilton andrew', 'andrew hilton')
                     |->('kim jungsang', 'jungsang kim')
                     |->('machanavajjhala ashwin', 'ashwin machanavajjhala')
                     |->('maggioni mauro', 'mauro maggioni')
                     |->('maggs bruce', 'bruce maggs')
                     |->('mukherjee sayan', 'sayan mukherjee')
                     |->('munagala kamesh', 'kamesh munagala')
                     |->('panigrahi debmalya', 'debmalya panigrahi')
                     |->('sapiro guillermo', 'guillermo sapiro')
                     |->('sun xiaobai', 'xiaobai sun')
                     |->('tomasi carlo', 'carlo tomasi')
                     |->('yang jun', 'jun yang')
                     |->('yang xiaowei', 'xiaowei yang')
                     |->('hsu lisa r.', 'lisa hsu')
                     |->('loveland donald w.', 'donald loveland')
                     |->('wagner robert a.', 'robert wagner')
                 {[Split: ' ', [1, 2] ], [LIT:' '], [Split: ' ', 0 ], } -> 15/44
                     |->('agarwal pankaj k.', 'pankaj k. agarwal')
                     |->('schmidler scott c.', 'scott c. schmidler')
                     |->('sorin daniel j.', 'daniel j. sorin')
                     |->('bryant robert l.', 'robert l. bryant')
                     |->('trivedi kishor s.', 'kishor s. trivedi')
                     |->('chase jeffrey s.', 'jeffrey s. chase')
                     |->('ellis carla schlatter', 'carla schlatter ellis')
                     |->('donald bruce r.', 'bruce r. donald')
                     |->('hartemink alexander j.', 'alexander j. hartemink')
                     |->('lebeck alvin r.', 'alvin r. lebeck')
                     |->('lee benjamin c.', 'benjamin c. lee')
                     |->('lucic richard a.', 'richard a. lucic')
                     |->('parr ronald e.', 'ronald e. parr')
                     |->('reif john h.', 'john h. reif')
                     |->('rodger susan h.', 'susan h. rodger')
                 {[LIT:'steve tanimoto'], } -> 0/44
                 {[LIT:'m. frans kaashoek'], } -> 0/44
                 {[LIT:'peter kazanzides'], } -> 0/44
                 {[LIT:'john a. board'], } -> 1/44
                     |->('board jr. john a.', 'john a. board')
                 {[LIT:'barbara liskov'], } -> 0/44
                 {[LIT:'adam wierman'], } -> 0/44
                 {[LIT:'boon thau loo'], } -> 0/44
                 {[LIT:'jeffrey r. n. forbes'], } -> 1/44
                     |->('forbes jeffrey r. n.', 'jeffrey r. n. forbes')
                 {[LIT:'salvatore j. stolfo'], } -> 0/44
                 {[LIT:'mathieu desbrun'], } -> 0/44
                 {[LIT:'heng ji'], } -> 0/44
                 {[LIT:'salman avestimehr'], } -> 0/44
                 {[LIT:'thomas funkhouser'], } -> 0/44
                 {[LIT:'donald bitzer'], } -> 0/44
                 {[LIT:'robert a. van de geijn'], } -> 0/44
                 {[LIT:'sebastian thrun'], } -> 0/44
                 {[LIT:'romit roy choudhury'], } -> 0/44
                 {[LIT:'jun xu'], } -> 0/44
                 {[LIT:'lorenzo alvisi'], } -> 0/44
                 {[LIT:'lee hollaar'], } -> 0/44
                 {[LIT:'leonidas guibas'], } -> 0/44
                 {[LIT:'yuval tamir'], } -> 0/44
                 {[LIT:'chris north'], } -> 0/44
                 {[LIT:'shaddin dughmi'], } -> 0/44
                 {[LIT:'xianghong jasmine zhou'], } -> 0/44
                 {[LIT:'tamer kahveci'], } -> 0/44
                 {[LIT:'deepak ganesan'], } -> 0/44
                 {[LIT:'stefanie tellex'], } -> 0/44
                 {[LIT:'nick mckeown'], } -> 0/44
                 {[LIT:'lee coraor'], } -> 0/44
                 {[LIT:'lirong xia'], } -> 0/44
                 {[LIT:'anind dey'], } -> 0/44

--- Not covered inputs:
****************

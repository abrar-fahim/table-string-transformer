---------------
Results for park to state 2
Coverage in golden matched rows: 22/27 = 81.48%
Best pattern Coverage  in golden matched rows: 81.48%
Coverage: 33/33 = 100.00%
Best pattern Coverage: 66.67%
Total Patterns: 6, input rows: 33
Average Input length (Num chars): 10.484848484848484, Average output length (Num chars): 8.515151515151516
Max Tokens: 3
Total Run time: 0.09081220626831055, Generalization time:9.5367431640625e-07
Total number of placeholder combinations (After removing duplicates): 108
Total number of all generated patterns: 3300
Number of duplicate patterns removed: 1342
Total number of generated patterns to try: 1958
Effective Generalizations: 0

Number of all generated placeholder comb.: 230
Number of all remaining placeholder comb.: 230
Number of all removed placeholder comb.: 0
Number of init remaining placeholder comb.: 115
Number of splitted remaining placeholder comb.: 115
Number of removed init placeholder comb.: 0
Number of removed splitted placeholder comb.: 0

placeholder generation time: 0.009741067886352539
extract patterns time: 0.02750992774963379
duplicate patterns remove time: 0.004313230514526367
patterns applying time: 0.047780752182006836
get covering set time: 0.0014672279357910156

Number of all patterns that applied on all rows (#pattern * #rows) (complexity): 64614
Number of successful patterns: 3670
Number of failed patterns: 60944
Number of failed patterns filtered by cache (cache hit): 56149
N-gram Row Matching: P:0.6666666666666666,R:0.7857142857142857,F:0.721311475409836
Params: {'max_tokens': 3, 'max_blocks': 3, 'generalize': False, 'sample_size': None, 'token_splitters': [' '], 'remove_duplicate_patterns': True, 'switch_literals_placeholders': True, 'only_first_match': False, 'units_to_extract': [<class 'Transformation.Blocks.LiteralPatternBlock.LiteralPatternBlock'>, <class 'Transformation.Blocks.PositionPatternBlock.PositionPatternBlock'>, <class 'Transformation.Blocks.TokenPatternBlock.TokenPatternBlock'>, <class 'Transformation.Blocks.SplitSubstrPatternBlock.SplitSubstrPatternBlock'>]}
pattern list: {
                 {[Split: ' ', 0 ], } -> 22/33
                     |->('utah (5)', 'utah')
                     |->('california (8)', 'california')
                     |->('alaska (8)', 'alaska')
                     |->('arizona (3)', 'arizona')
                     |->('wyoming (2)', 'wyoming')
                     |->('tennessee', 'tennessee')
                     |->('montana (2)', 'montana')
                     |->('idaho', 'idaho')
                     |->('oregon', 'oregon')
                     |->('nevada', 'nevada')
                     |->('washington (3)', 'washington')
                     |->('florida (3)', 'florida')
                     |->('hawaii (2)', 'hawaii')
                     |->('kentucky', 'kentucky')
                     |->('texas (2)', 'texas')
                     |->('michigan', 'michigan')
                     |->('minnesota', 'minnesota')
                     |->('ohio', 'ohio')
                     |->('arkansas', 'arkansas')
                     |->('virginia', 'virginia')
                     |->('maine', 'maine')
                     |->('colorado (4)', 'colorado')
                 {[Split: ' ', 0 ], [Split: ' ', 1 ], } -> 5/33
                     |->('south carolina', 'southcarolina')
                     |->('north carolina', 'northcarolina')
                     |->('north dakota', 'northdakota')
                     |->('south dakota (2)', 'southdakota')
                     |->('new mexico', 'newmexico')
                 {[LIT:'northc'], [SplitSubstr: ' ', 1, (1-2) ], [LIT:'rolina'], } -> 3/33
                     |->('north dakota', 'northcarolina')
                     |->('south carolina', 'northcarolina')
                     |->('north carolina', 'northcarolina')
                 {[LIT:'northdako'], [SplitSubstr: 'a', 0, (3-4) ], [SplitSubstr: 'o', 1, (5-6) ], } -> 3/33
                     |->('south dakota (2)', 'northdakota')
                     |->('north dakota', 'northdakota')
                     |->('north carolina', 'northdakota')
                 {[LIT:'rhodeisland'], } -> 1/33  -- Original Trans.: {[SplitSubstr: 'v', 1, (1-2) ], [LIT:'hode'], [SplitSubstr: 'u', 1, (11-17) ], }
                     |->('u.s. virgin islands', 'rhodeisland')
                 {[LIT:'westvirginia'], } -> 1/33  -- Original Trans.: {[LIT:'westvirginia'], }
                     |->('virginia', 'westvirginia')

****Golden rows apply patterns******
golden pattern list: {
                 {[Split: ' ', 0 ], } -> 22/27
                     |->('alaska (8)', 'alaska')
                     |->('arizona (3)', 'arizona')
                     |->('arkansas', 'arkansas')
                     |->('california (8)', 'california')
                     |->('colorado (4)', 'colorado')
                     |->('florida (3)', 'florida')
                     |->('hawaii (2)', 'hawaii')
                     |->('idaho', 'idaho')
                     |->('kentucky', 'kentucky')
                     |->('maine', 'maine')
                     |->('michigan', 'michigan')
                     |->('minnesota', 'minnesota')
                     |->('montana (2)', 'montana')
                     |->('nevada', 'nevada')
                     |->('ohio', 'ohio')
                     |->('oregon', 'oregon')
                     |->('tennessee', 'tennessee')
                     |->('texas (2)', 'texas')
                     |->('utah (5)', 'utah')
                     |->('virginia', 'virginia')
                     |->('washington (3)', 'washington')
                     |->('wyoming (2)', 'wyoming')
                 {[Split: ' ', 0 ], [Split: ' ', 1 ], } -> 0/27
                 {[LIT:'northc'], [SplitSubstr: ' ', 1, (1-2) ], [LIT:'rolina'], } -> 0/27
                 {[LIT:'northdako'], [SplitSubstr: 'a', 0, (3-4) ], [SplitSubstr: 'o', 1, (5-6) ], } -> 0/27
                 {[LIT:'rhodeisland'], } -> 0/27
                 {[LIT:'westvirginia'], } -> 0/27

--- Not covered inputs:
   ('new mexico', 'new mexico')
   ('north carolina', 'north carolina')
   ('north dakota', 'north dakota')
   ('south carolina', 'south carolina')
   ('south dakota (2)', 'south dakota')
****************
